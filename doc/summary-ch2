
2.1 빈 선언
2.1.2 간단한 빈 선언
<bean id="duke" class="com.springinaction.springidol.Juggler"/>
- <bean> 엘리먼트는 스프링에서 가장 기본적인 설정 단위
- 스프링에게 객체를 만들어 달라는 의미
-- id attribute는 해당 빈을 스프링 컨테이너에서 참조할 때 사용하는 이름을 나타냄
-- class attribute는 스프링에서 빈의 타입을 말해줌
- new com.springinaction.springidol.Juggler()와 같은 역할


2.1.3 생성자를 이용한 주입
Juggler의 생성자 종류
1.
public Juggler() {
}
2.
public Juggler(int beanBags) {
	this.beanBags = beanBags;
}
- 2.1.2에서 사용한 duke 빈 선언은 Juggler의 기본 생성자를 통해서 빈을 생성
- <constructor-arg value="15" />를 통해서 int 인자를 받는 생성자를 통해서 빈 생성
- <constructor-arg> 앨리먼트는 스프링이 빈을 생성할 때 추가 정보의 이용이 가능


<bean id="poeticDuke" class="com.springinaction.springidol.PoeticJuggler">
	<constructor-arg value="15" />
	<constructor-arg ref="sonnet29" />
</bean>
<bean id="sonnet29" class="com.springinaction.springidol.Sonnet29" />
- ref attribute을 사용하여 레퍼런스를 나타냄
-- Poem sonnet29 = new Sonnec29();
-- Performer duke = new PoeticJuggler(15, sonnet29); 순으로 수행되는 것과 동일
- 생성자 주입은 좋은 방법이지만, 선언하려는 빈에 public 생성자가 없을때는 사용할 수 없다.
-- private 생성자는 언제 사용되는가? 인스턴스를 생성하지 않기 위해서?????


싱글톤 클래스를 스프링에서 빈으로 설정하는 경우
- 싱글톤 클래스에서는 보통 생성자를 private으로 숨기고, static 메소드를 통해서만 인스턴스를 1회 생성한다.
- 스프링 아이돌 경연대회에서는 공연자가 장기를 보여줄 무대는 하나여야 하기 때문에, Stage 클래스는 인스턴스를 둘 이상 만들 수 없도록 싱글톤으로 구현
<bean id="theStage" class="com.springinaction.springidol.Stage"
	factory-method="getInstance" />
- factory-method attribute를 통해서 생성자 대신 인스턴스 생성에 사용할 static 메소드를 지정할 수 있다



2.1.4 빈 유효범위 지정
- 스프링의 모든 빈은 싱글톤(singleton)이다
-- 컨테이너가 빈을 내줄 때(와이어링 할 때 혹은 컨테이너에 직접적으로 getBean() 메소드를 호출할 때)는 기본적으로 항상 같은 인스턴스를 준다
-- 새로운 인스턴스를 내줘야 하는 경우라면?
--- 스프링의 <bean> 설정 중에 유효범위(scope)를 사요한다.
--- 유효범위를 prototype으로 지정하면, 빈 생성 요청이 들어올 때 마다 새로운 빈을 생성한다.
<bean id="ticket" class="com.springinaction.springidol.Ticket" scope="prototype"/>
--- 티켓 빈이 싱글톤이라면 모든 관람객이 동일한 티켓을 받게된다.

scope 설정 값
- singleton : 스프리 컨테이너당 하나의 인스턴스(기본값)
- prototype : 사용할 때 마다 새 인스턴스 생성
- request : HTTP 요청당 하나의 인스턴스, Spring MVC 같이 웹 환경에서 사용할 때만 유효함
- session : HTTP 세션당 하나의 인스턴스, Spring MVC 같이 웹 환경에서 사용할 때만 유효함
- global-session : 전역 HTTP 세션(global HTTP session)당 하나의 인스턴스, 포틀릿 환경에서 사용할 때만 유효함

* 싱글톤 개념의 차이
- 스프링의 싱글톤 개념은 해당 스프링 컨텍스트 범위 내로 한정
- 클래스로더(classloader)당 하나의 인스턴스를 보장하는 일반적인 자바에서의 싱글톤과를 다름
- 스프리의 싱글톤 개념은 애플리케이션 컨텍스트의 빈 정의항목마다 하나의 빈 인스턴스를 보장함을 의미
-- 즉, 같은 이름을 갖는 빈 인스턴스는 하나이며, 싱글톤이 아닌 경우에는 같은 이름의 빈을 가져오더라도 인스턴스가 다를수 있다
- 같은 클래스지만 서로 다른 빈을 정의하면, 각각은 싱글톤이라 하더라도 클래스당 빈 정의 항목 개수만큼 인스턴스가 생성

