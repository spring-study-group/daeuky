2장. 빈 와이어링
- wiring : 애플리케이션 객체 간의 연관관계를 형성하는 작업
-- 스프링을 사용하는 애플리케이션에서는 각 개체가 자신의 할 일을 하기 위해 필요한 다른 객체를 직접 찾거나 생성할 필요가 없음
-- 컴테이너가 협업할 객체에 대한 레퍼런스를 주기 때문에
- wiring은 Depency Injection 개념의 핵심


2.1 빈 선언
2.1.2 간단한 빈 선언
<bean id="duke" class="com.springinaction.springidol.Juggler"/>
- <bean> 엘리먼트는 스프링에서 가장 기본적인 설정 단위
- 스프링에게 객체를 만들어 달라는 의미
-- id attribute는 해당 빈을 스프링 컨테이너에서 참조할 때 사용하는 이름을 나타냄
-- class attribute는 스프링에서 빈의 타입을 말해줌
- new com.springinaction.springidol.Juggler()와 같은 역할


2.1.3 생성자를 이용한 주입
Juggler의 생성자 종류
1.
public Juggler() {
}
2.
public Juggler(int beanBags) {
	this.beanBags = beanBags;
}
- 2.1.2에서 사용한 duke 빈 선언은 Juggler의 기본 생성자를 통해서 빈을 생성
- <constructor-arg value="15" />를 통해서 int 인자를 받는 생성자를 통해서 빈 생성
- <constructor-arg> 앨리먼트는 스프링이 빈을 생성할 때 추가 정보의 이용이 가능


<bean id="poeticDuke" class="com.springinaction.springidol.PoeticJuggler">
	<constructor-arg value="15" />
	<constructor-arg ref="sonnet29" />
</bean>
<bean id="sonnet29" class="com.springinaction.springidol.Sonnet29" />
- ref attribute을 사용하여 레퍼런스를 나타냄
-- Poem sonnet29 = new Sonnec29();
-- Performer duke = new PoeticJuggler(15, sonnet29); 순으로 수행되는 것과 동일
- 생성자 주입은 좋은 방법이지만, 선언하려는 빈에 public 생성자가 없을때는 사용할 수 없다.
-- private 생성자는 언제 사용되는가? 인스턴스를 생성하지 않기 위해서?????


싱글톤 클래스를 스프링에서 빈으로 설정하는 경우
- 싱글톤 클래스에서는 보통 생성자를 private으로 숨기고, static 메소드를 통해서만 인스턴스를 1회 생성한다.
- 스프링 아이돌 경연대회에서는 공연자가 장기를 보여줄 무대는 하나여야 하기 때문에, Stage 클래스는 인스턴스를 둘 이상 만들 수 없도록 싱글톤으로 구현
<bean id="theStage" class="com.springinaction.springidol.Stage"
	factory-method="getInstance" />
- factory-method attribute를 통해서 생성자 대신 인스턴스 생성에 사용할 static 메소드를 지정할 수 있다



2.1.4 빈 유효범위 지정
- 스프링의 모든 빈은 싱글톤(singleton)이다
-- 컨테이너가 빈을 내줄 때(와이어링 할 때 혹은 컨테이너에 직접적으로 getBean() 메소드를 호출할 때)는 기본적으로 항상 같은 인스턴스를 준다
-- 새로운 인스턴스를 내줘야 하는 경우라면?
--- 스프링의 <bean> 설정 중에 유효범위(scope)를 사요한다.
--- 유효범위를 prototype으로 지정하면, 빈 생성 요청이 들어올 때 마다 새로운 빈을 생성한다.
<bean id="ticket" class="com.springinaction.springidol.Ticket" scope="prototype"/>
--- 티켓 빈이 싱글톤이라면 모든 관람객이 동일한 티켓을 받게된다.

scope 설정 값
- singleton : 스프리 컨테이너당 하나의 인스턴스(기본값)
- prototype : 사용할 때 마다 새 인스턴스 생성
- request : HTTP 요청당 하나의 인스턴스, Spring MVC 같이 웹 환경에서 사용할 때만 유효함
- session : HTTP 세션당 하나의 인스턴스, Spring MVC 같이 웹 환경에서 사용할 때만 유효함
- global-session : 전역 HTTP 세션(global HTTP session)당 하나의 인스턴스, 포틀릿 환경에서 사용할 때만 유효함

* 싱글톤 개념의 차이
- 스프링의 싱글톤 개념은 해당 스프링 컨텍스트 범위 내로 한정
- 클래스로더(classloader)당 하나의 인스턴스를 보장하는 일반적인 자바에서의 싱글톤과를 다름
- 스프리의 싱글톤 개념은 애플리케이션 컨텍스트의 빈 정의항목마다 하나의 빈 인스턴스를 보장함을 의미
-- 즉, 같은 이름을 갖는 빈 인스턴스는 하나이며, 싱글톤이 아닌 경우에는 같은 이름의 빈을 가져오더라도 인스턴스가 다를수 있다
- 같은 클래스지만 서로 다른 빈을 정의하면, 각각은 싱글톤이라 하더라도 클래스당 빈 정의 항목 개수만큼 인스턴스가 생성


2.1.5 빈의 초기화와 정리 작업
스프링은 빈 생명주기에 대한 후크(hook) 제공
- init-method : 빈의 인스턴스 직후에 호출할 메소드 이름을 지정
- destroy-method : 컨터이너에서 빈이 소멸되기 직전에 호출할 메소드 이름 지정

public class Auditorium {
	public void turnOnLights(){
		// Auditorium 인스턴스가 생성될 때 실행
	}
	public void turnOffLights(){
		// Auditorium 인스턴스가 소멸될 때 실행
	}
}

<bean id="auditorium"
	class="com.springinaction.springidol.Auditorium"
	init-method="turnOnLights"
	destory-method="turnOffLights"/>
- turnOnLights() 메소드는 auditorium 빈이 생성된 후 바로 후출
- turnOffLights() 메소드는 auditorium 빈이 컨테이너에서 소멸 된 직후에 호출됨

* InitializingBean & DisposableBean Interface
- InitializingBean과 DisposableBean 인터페이스를 구현하도록 빈 클래스를 작성하면 init-method와 destroy-method를 사용한 동일한 결과를 얻을 수 있다
- 생명주기에 관여할 수 있도록 스프링 컨테이너가 보장
-- InitializingBean의 afterPropertiesSet()
-- DisposableBean의 destroy()

- 장점
-- 스프링 컨테이너가 별도의 설정 없이도 인식
- 단점
-- 빈과 스프링 API에 결합도(coupling)이 높아짐?


2.2 Bean Property에 주입하기
- 보통의 자바빈 프로퍼티는 private으로 선언되고, setXXX()와 getXXX() 형태로 두개의 접근자 메소드가 정의
- 스프링의 세터 주입방식을 이용하면 프로퍼티의 세터 메소드로 특정 프로퍼티의 값을 설정

2.2.1 단순 프로퍼티 값 주입하기
- <property> 엘리먼트의 사용을 통해서 빈 프로퍼티 값을 설정
- <consturctor-arg>와 유사
-- BUT! 생성자 인자를 통해서 값을 주입하는 대신에 <property>는 해당 프로퍼티의 setter method를 호출하여 주입
<bean id="Kenny"
	class="com.springinaction.springIdol.InstrumentalList">
	<property name="song" value="Jingle Bells"/>
</bean>
- Instrumentalist 빈이 생성되면 스프링은 바로 지정된 프로퍼티의 setter mothod를 이용해서 <property> 엘리먼트로 해당 프로퍼티에 값을 주입
- <property>는 String 값을 주입하는 데만 쓰이는 것이 아니라 숫자(int, float, java.lang.Double), boolean 값에도 사용
- 스프링은 XML로 지정된 값을 프로퍼티의 값에 따라서 자동으로 변환
- 단순히 값의 하드코딩을 막고자 DI를 사용하는 것이 아니다!!
-- 어플리케이션 내의 여러 객체를 서로 협력할 수 있게 연결
-- 각자 서로를 찾아다니지 않도록 할 때 DI의 진가가 나타난다.

2.2.2 다른 빈 참조
<bean id="kenny"
	class="com.springinaction.springidol.Instrumentalist">
	<property name="song" value="Jingle Bells"/>
	<property name="instrumental" reg="saxophone"/>
</bean>
- Performer 인터페이스를 통해 코딩하기 때문에 실제 공연자의 타입, 즉 시인 저글러인지 색소폰 연주자 인지 상관없이 공연 요청이 가능
- 스프링은 인터페이셔 사용을 적극 추천
- 인터페이스의 적극적인 사용을 통해서 loose coupling이 달성

* 내부 빈(inner bean) 주입
- 특정 빈을 하나의 빈에서만 사용하고 싶을 때 사용
<bean id="kenny"
	class="com.springinaction.springidol.Instrumentalist">
	<property name="song" value="Jingle Bells"/>
	<property name="instrumental">
		<bean class="com.springinaction.springidol.Saxophone"/>
	</property>
</bean>
- 내부 빈은 세터 주입뿐만 아니라 생성자 주입 방식에서도 사용 가능
<bean id="duke"
	class="com.springinaction.springidol.PoeticJuggler">
	<constructor-arg value="15"/>
	<constructor-arg>
		<bean class="com.springinaction.springidol.Sonnet29"/>
	</constructor-arg>
</bean>
- 내부빈에는 id attribute가 없음
-- ID를 이용해서 내부 빈을 참조할 필요가 없기 때문에 별 의미 없음
- 단점
-- 1. 내부 빈은 재사용이 안된다.
-- 내부 빈은 자신을 참조하는 빈의 프로퍼티로 딱 한번 주입
-- 2. 가독성이 떨어짐

2.2.4 컬렉션 와이어링
- 프로퍼티의 값이 복수라면, 즉 프로퍼티가 컬렉션 타입이라면 어떻게 할 것인가?
- <list>, <set>, <map>, <props>
<bean id="hank"
	class="com.springinaction.springidol.OneManBand">
	<property name="instruments">
		<list>
			<ref bean="guitar"/>
			<ref bean="cymbal"/>
			<ref bean="harmonica"/>
		</list>
	</property>
</bean>
<bean id="hank" class="com.springinaction.springidol.OneManBand">
	<property name="instruments">
		<map>
			<entry key="GUITAR" value-ref="guitar"/>
			<entry key="GYMBAL" value-reg="cymbal"/>
			<entry key="HARMONICA" value=reg="harmonica"/>
		</map>
	</property>
</bean>

2.2.5 Null wiring
<property name="somNonNullProperty"><null/></property>


2.3 SpEL


2.4 요약
- 스프링 프레임워크의 중심에는 스프링 컨테이너가 있음
- 스프링은 여러 컨테이너 구현체를 제공하고, 컨테이너들은 크게 2 종류로 분류
-- BeanFactory는 가장 단순한 형태의 컨테이터로서 기본적인 DI와 빈 와이어링 서비스를 제공
-- ApplicationContext 컨테이너는 더 고급 프레임워크 서비스가 필요할 떄 사용

- 2장에서는 스프링 컨테이너 내에서 여러 빈을 와이어링 하는 방법을 배움
-- 와이어링은 보통 XML 파일을 이요한 스프링 컨테이너 내에서 수행
-- XML 파일은 애플리케이션의 모든 컴포넌트에 대한 설정 정보를 가지고 있음